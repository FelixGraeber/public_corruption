getwd() setwd("C:/Users/graeb/OneDrive/Uni/_Masterarbeit/Data/R Projekt") # install.packages("readr") # install.packages("plyr") # install.packages("ggplot2") # install.packages("psych") # install.packages("dplyr") # install.packages("car") library(plyr) library(dplyr) library(readr) library(ggplot2) library(psych) library(car) ##################################### ##### 1. DATA IMPORT & CLEANING ##### ##################################### ##### 1.1 GOVERNMENT DATA ##### ## Data: "Statistics on revenue, expenditure, debt, and assets (cash and security holdings) for governments. There are statistics for the 50 state areas and the District of Columbia, as well as a national summary." government <- read_fwf(     file = "Fin_GID_2014.txt",     skip = 4,     fwf_widths(c(14, 64, 35, 5, 5, 9, 2, 7, 2, 2, 2, 4, 2))) colnames(government) = c("ID_Code", "ID_Name", "County_Name", "FIPS", "FIPS_Place_Code", "Population", "Population_Year", "Enrollment", "Enrollment_Year", "Function_Code_for_Special_Districts", "School_Level_Code", "Fiscal_Year_Ending", "Survey_Year") raw_data_government <- government ##### 1.1.1 Decompose ID ##### # digit 1-2: state code government["State_Code"] <- substr(government$ID_Code, 1, 2) # digit 3: type of government  government["Type_of_Government"] <- substr(government$ID_Code, 3, 3) # 0 = state, 1 = county, 2 = city, 3 = township, 4 = special district, 5 = independent school district # digit 4-6: county or county-type area government["County_Code"] <- substr(government$ID_Code, 4, 6) # digit 7-9: unit identifier government["Unit_Identifier"] <- substr(government$ID_Code, 7, 9) # digit 10-14: should be 00000 to indicate that the unit is not part of another government government["Check_Var_Multiple_Governments"] <- substr(government$ID_Code, 10, 14) ##### 1.1.2 Remove entries and columns ##### # remove all individual units = 3,4 or 5 since we're only interested in states, counties and cities government <- government[!government$Type_of_Government %in% c(3, 4, 5),] # since only school districts have enrollment and school information, we can drop the columns "Enrollment", "Enrollment_Year" and "School_Level_Code" # "Function_Code_for_Special_Districts" is only for special districts, can be dropped government <- government[, !(names(government) %in% c("Enrollment", "Enrollment_Year", "Function_Code_for_Special_Districts", "School_Level_Code"))] # All remaining items are not part of another government (=00000). Column can be removed table(government$Check_Var_Multiple_Governments) government <- government[, !(names(government) %in% "Check_Var_Multiple_Governments")] ##### 1.1.3 Clean FIPS codes ##### # some FIPS codes are obviously wrong; replace by correct values government$FIPS <- as.numeric(government$FIPS) government$ID_Code <- as.numeric(government$ID_Code) # FIPS code is 2 (state code of Alaska); correct one is 02275 government[which(government$ID_Code == 2203600100000), "FIPS"] <- 02275 ##### 1.1.4 Reformat data ##### # reformatting variables as appropriate government$FIPS_County_Code <- as.numeric(government$FIPS_County_Code) government$FIPS_Place_Code <- as.numeric(government$FIPS_Place_Code) government$FIPS_State_Code <- as.numeric(government$FIPS_State_Code) government$Population_Year <- as.numeric(government$Population_Year) government$Fiscal_Year_Ending <- as.factor(government$Fiscal_Year_Ending) # fiscal year ending is a date, formatted as MDD --> factor variable government$ID_Code <- as.numeric(government$ID_Code) government$Type_of_Government <- as.factor(government$Type_of_Government) ##### 1.1.5 Subsetting government into state, county and city dataframes government_state <- government[government$Type_of_Government == 0,] government_county <- government[government$Type_of_Government == 1,] government_city <- government[government$Type_of_Government == 2,] ##### 1.2 MAPPING DATA ##### ##### 1.2.1 FIPS to District table ##### mapping_fips_to_districts <- read.csv(file = "MAPPING_FIPS_to_District.csv", header = T, sep = ";", encoding = "UTF-8") colnames(mapping_fips_to_districts) <- c("State", "County", "State_Code", "County_Code", "FIPS", "District", "Numfips") # load mapping list # mapping_states_to_districts <- read.csv(file = "MAPPING_States_DistrictCourts_StateCodes.csv", header = T, sep = ";", encoding = "UTF-8") # colnames(mapping_states_to_districts) = c("District_Courts", "State_Code", "State_Name", "Abbrevation") ##### 1.2.1.1 Cleaning ##### str(mapping_fips_to_districts) mapping_fips_to_districts$County <- as.character(mapping_fips_to_districts$County) mapping_fips_to_districts$County_Code <- as.numeric(mapping_fips_to_districts$County_Code) # Shannon County, SD changed its name to Oglala Lakota County, SD in 2015. My mapping table was apparently outdated. Due to this name change, the FIPS changed from 46113 to 46102 mapping_fips_to_districts$FIPS[mapping_fips_to_districts$FIPS == 46113] <- 46102 mapping_fips_to_districts$Numfips[mapping_fips_to_districts$FIPS == 46102] <- 46102 mapping_fips_to_districts$County[mapping_fips_to_districts$FIPS == 46102] <- "Oglala Lakota" # Wade Hampton Census Area, A changed its name to Kusilvak Census Area, A in 2015. FIPS changed from 02270 to 02158 mapping_fips_to_districts$FIPS[mapping_fips_to_districts$FIPS == 02270] <- 02158 mapping_fips_to_districts$Numfips[mapping_fips_to_districts$FIPS == 02158] <- 2158 mapping_fips_to_districts$County[mapping_fips_to_districts$FIPS == 02158] <- "Kusilvak" # My mapping table has mapped 1 FIPS code twice. Remove it: mapping_fips_to_districts <- mapping_fips_to_districts[!mapping_fips_to_districts$County == "Skagway-Yakutat",] ##### 1.3 MERGING ##### # merging of states to judicial districts not possible, since first government_state <- merge(government_state, mapping_fips_to_districts, by.x = "FIPS", by.y = "State_Code") # HAVE A LOOK ON THIS ONE! government_county <- merge(government_county, mapping_fips_to_districts, by = "FIPS") government_city <- merge(government_city, mapping_fips_to_districts, by = "FIPS") ##### 1.4 CORRUPTION DATA ##### # Describing the activities of the Public Integrity Section from 1998 to 2015.  # Also provides statistics on the nationwide federal effort against public corruption over the previous decade corruption <- read.csv(file = "Public_Corruption_Data.csv", header = T, sep = ";", encoding = "UTF-8") colnames(corruption) <- c("District_Code", "District", "1998","1999","2000","2001","2002","2003","2004","2005","2006", "2007", "2008","2009","2010","2011","2012","2013", "2014","2015") # add total count total <- NULL for (row in 1:nrow(corruption)) {     total <- c(total, sum(corruption[row, 3:20], na.rm = T)) } corruption$Total <- as.numeric(total) # checksum = sum, all good
bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8") # 1048575 elements
str(bond_issuers)
bond_issuers_removed <- c(bond_issuers_removed, unique(bond_issuers(grepl("Township", bond_issuers$iq_issuer))), unique(bond_issuers(grepl("Special District", bond_issuers$iq_issuer))), unique(bond_issuers(grepl("Educational", bond_issuers$iq_issuer))))
bond_issuers_removed <- NULL
bond_issuers_removed <- bond_issuers[grepl("School", bond_issuers$iq_issuer),]
bond_issuers_removed <- unique(bond_issuers_removed$iq_issuer) # manually checking for false positives; nope, seems to be OK
bond_issuers_removed_unique <- unique(bond_issuers_removed$iq_issuer)
bond_issuers <- bond_issuers[!grepl("School", bond_issuers$iq_issuer),] # remove; now 186628 elements
bond_issuers_removed <- c(bond_issuers_removed, unique(bond_issuers(grepl("Township", bond_issuers$iq_issuer))), unique(bond_issuers(grepl("Special District", bond_issuers$iq_issuer))), unique(bond_issuers(grepl("Educational", bond_issuers$iq_issuer))))
bond_issuers_removed <- c(bond_issuers_removed, unique(bond_issuers[grepl("Township", bond_issuers$iq_issuer),]), unique(bond_issuers[grepl("Special District", bond_issuers$iq_issuer),]), unique(bond_issuers[grepl("Educational", bond_issuers$iq_issuer),]) bond_issuers_removed <- NULL
bond_issuers_removed <- NULL
bond_issuers_removed <- c(bond_issuers_removed, unique(bond_issuers[grepl("Township", bond_issuers$iq_issuer),]), unique(bond_issuers[grepl("Special District", bond_issuers$iq_issuer),]), unique(bond_issuers[grepl("Educational", bond_issuers$iq_issuer),]) bond_issuers_removed <- c(bond_issuers_removed, unique(bond_issuers[grepl("Township", bond_issuers$iq_issuer),]), unique(bond_issuers[grepl("Special District", bond_issuers$iq_issuer),]), unique(bond_issuers[grepl("Educational", bond_issuers$iq_issuer),]) bond_issuers_removed <- c(bond_issuers_removed, unique(bond_issuers[grepl("Township", bond_issuers$iq_issuer),]), unique(bond_issuers[grepl("Special District", bond_issuers$iq_issuer),]), unique(bond_issuers[grepl("Educational", bond_issuers$iq_issuer),]))
saveRemovedEntries <- function(keywords) {     for (i in 1:length(keywords)){         keyword <- as.character(keywords[i])         bond_issuers <- bond_issuers[!grepl(keyword, bond_issuers$iq_issuer),]         bond_issuers_removed <- c(bond_issuers_removed, unique(bond_issuers[grepl(keyword, bond_issuers$iq_issuer)]))     } }
keywords_for_exclusion <- c("School", "Township", "Special District", "Educational")
bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8")
bond_issuers_removed <- NULL
saveRemovedEntries(keywords_for_exclusion)
bond_issuers <- bond_issuers[!grepl("School", bond_issuers$iq_issuer),] # remove; now 186628 elements
bond_issuers <- bond_issuers[!gerpl("Township", bond_issuers$iq_issuer),]
bond_issuers <- bond_issuers[!grepl("Township", bond_issuers$iq_issuer),]
bond_issuers <- bond_issuers[!grepl("Special District", bond_issuers$iq_issuer),] #
bond_issuers <- bond_issuers[!grepl("Educational", bond_issuers$iq_issuer),] #
bond_issuers_unique <- unique(bond_issuers$iq_issuers)
bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8") # 1048575 elements
str(bond_issuers)
bond_issuers <- bond_issuers[!grepl("School", bond_issuers$iq_issuer),] # remove; now 186628 elements
bond_issuers <- bond_issuers[!grepl("Township", bond_issuers$iq_issuer),] # 181618 elements
bond_issuers <- bond_issuers[!grepl("Special District", bond_issuers$iq_issuer),] # 181607
bond_issuers <- bond_issuers[!grepl("Educational", bond_issuers$iq_issuer),] # 174853
bond_issuers_unique <- unique(bond_issuers$iq_issuers)
bond_issuers_unique <- unique(bond_issuers$iq_issuer)
bond_issuers <- bond_issuers[!grepl("Hospital", bond_issuers$iq_issuer),]
bond_issuers_unique <- unique(bond_issuers$iq_issuer)
install.packages("tm")
library(tm)
bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8", stringsAsFactors = F) # 1048575 elements
bond_issuers_removed <- NULL
saveRemovedEntries(keywords_for_exclusion, bond_issuers)
saveRemovedEntries <- function(keywords, bond_issuers) {     for (i in 1:length(keywords)){         keyword <- as.character(keywords[i])         bond_issuers <- bond_issuers[!grepl(keyword, bond_issuers$iq_issuer),]         bond_issuers_removed <- c(bond_issuers_removed, unique(bond_issuers[grepl(keyword, bond_issuers$iq_issuer)]))     } }
saveRemovedEntries(keywords_for_exclusion, bond_issuers)
saveRemovedEntries(keywords_for_exclusion, bond_issuers)
bond_issuers_unique <- unique(bond_issuers$iq_issuer)
bond_issuers <- bond_issuers[!grepl("School", bond_issuers$iq_issuer),] # remove; now 186628 elements
bond_issuers <- bond_issuers[!grepl("Township", bond_issuers$iq_issuer),] # 181618 elements
bond_issuers <- bond_issuers[!grepl("Special District", bond_issuers$iq_issuer),] # 181607
bond_issuers <- bond_issuers[!grepl("Educational", bond_issuers$iq_issuer),] # 174853
bond_issuers <- bond_issuers[!grepl("Hospital", bond_issuers$iq_issuer),] # 173075
bond_issuers_unique <- unique(bond_issuers$iq_issuer)
for (i in 1:length(bond_issuers_removed)) {     list_of_unique_issuers <- c(list_of_unique_issuers, bond_issuers_removed[i]) }
list_of_unique_issuers <- NULL
for (i in 1:length(bond_issuers_removed)) {     list_of_unique_issuers <- c(list_of_unique_issuers, bond_issuers_removed[i]) }
length(bond_issuers_removed)
nrow(bond_issuers_removed)
for (i in 1:length(bond_issuers_unique)) {     list_of_unique_issuers <- c(list_of_unique_issuers, bond_issuers_removed[i]) }
length(bond_issuers_unique)
bond_issuers_unique[10]
for (i in 1:length(bond_issuers_unique)) {     list_of_unique_issuers <- c(list_of_unique_issuers, bond_issuers_unique[i]) }
list_of_unique_issuers <- paste(bond_issuers$iq_issuer, collapse = " ")
list_of_unique_issuers <- paste(bond_issuers_unique, collapse = " ")
list_of_unique_issuers
rm(list_of_unique_issuers, envir = as.environment(".GlobalEnv"))
wordcloud_rawstring <- paste(bond_issuers_unique, collapse = " ")
wordcloud_source <- VectorSource(wordcloud_rawstring)
wordcloud_corpus <- Corpus(wordcloud_source)
wordcloud_corpus <- tm_map(wordcloud_corpus, content_transformer(tolower))
wordcloud_corpus <- tm_map(wordcloud_corpus, removePunctuation)
wordcloud_corpus <- tm_map(wordcloud_corpus, stripWhitespace)
wordcloud_corpus <- tm_map(wordcloud_corpus, removeWords, stopwords("english"))
frequency <- colSums(dtm2)
dtm2 <- as.matrix(wordcloud_dtm)
wordcloud_dtm <- DocumentTermMatrix(corpus) # create document term matrix
wordcloud_dtm <- DocumentTermMatrix(wordcloud_corpus) # create document term matrix
dtm2 <- as.matrix(wordcloud_dtm)
frequency <- colSums(dtm2)
frequency
head(frequency)
frequency <- sort(frequency, decreasing = T)
fre
frequency
install.packages("wordcloud")
library(wordcloud)
generateWordCloud <- function(input_text) {     wordcloud_rawstring <- paste(input_text, collapse = " ")     wordcloud_source <- VectorSource(wordcloud_rawstring)     wordcloud_corpus <- Corpus(wordcloud_source)     wordcloud_corpus <- tm_map(wordcloud_corpus, content_transformer(tolower)) # lower case everything     wordcloud_corpus <- tm_map(wordcloud_corpus, removePunctuation) # remove punctioation      wordcloud_corpus <- tm_map(wordcloud_corpus, stripWhitespace) # strip whitespace     wordcloud_corpus <- tm_map(wordcloud_corpus, removeWords, stopwords("english")) # common words w/o any "content"     wordcloud_dtm <- DocumentTermMatrix(wordcloud_corpus) # create document term matrix     dtm2 <- as.matrix(wordcloud_dtm)     frequency <- colSums(dtm2)     frequency <- sort(frequency, decreasing = T)     # install.packages("wordcloud")     library(wordcloud)     words <- names(frequency)     wordcloud(words[1:50], frequency[1:50]) }
generateWordCloud(bond_issuers_unique)
head(frequency)
generateWordCloud(bond_issuers_unique)
generateWordCloud(bond_issuers_unique, 25)
source("./Custom_functions/Custom_Functions.R")
generateWordCloud(bond_issuers_unique, 25)
rm(generateWordCloud, envir = as.environment(".GlobalEnv"))
generateWordCloud(bond_issuers_unique, 25)
if (exists("generateWordCloud", mode = "function"))
source("./Custom_functions/Custom_Functions.R")
generateWordCloud(bond_issuers_unique, 25)
if (exists("generateWordCloud", mode = "function"))
source("./Custom_functions/Custom_Functions.R")
generateWordCloud(bond_issuers_unique, 25)
load("./Custom_functions/Custom_Functions.R")
source("Custom_Functions.R")
generateWordCloud(bond_issuers_unique, 25)
bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8", stringsAsFactors = F) # 1048575 elements
bond_issuers_unique <- unique(bond_issuers$iq_issuer)
source("Custom_Functions.R")
generateWordCloud(bond_issuers_unique, 25)
print("abs")
generateWordCloud(bond_issuers_unique, 25)
bond_issuers_unique <- unique(bond_issuers$iq_issuer) source("Custom_Functions.R") generateWordCloud(bond_issuers_unique, 50)
bond_issuers <- bond_issuers[!grepl("School", bond_issuers$iq_issuer),] # remove; now 186628 elements  bond_issuers <- bond_issuers[!grepl("Township", bond_issuers$iq_issuer),] # 181618 elements bond_issuers <- bond_issuers[!grepl("Special District", bond_issuers$iq_issuer),] # 181607 bond_issuers <- bond_issuers[!grepl("Educational", bond_issuers$iq_issuer),] # 174853 bond_issuers <- bond_issuers[!grepl("Hospital", bond_issuers$iq_issuer),] # 173075
generateWordCloud(bond_issuers_unique, 50)
bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8", stringsAsFactors = F, tolower = T) # 1048575 elements
bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8", stringsAsFactors = F, tolower = T) # 1048575 elements
str(bond_issuers)
bond_issuers$iq_issuer <- tolower(bond_issuers$iq_issuer)
str(bond_issuers)
head(bond_issuers$iq_issuer)
bond_issuer_names <- unique(bond_issuers$iq_issuer)
bond_issuers_unique <- unique(bond_issuers$iq_issuer)
rm(bond_issuer_names, envir = as.environment(".GlobalEnv"))
generateWordCloud(bond_issuers_unique, 50)
bond_issuers_unique
write.csv(bond_issuers, file = "bond_issuers_cleaned.csv")
library(plyr) library(dplyr) library(readr) library(ggplot2) library(psych) library(car) library(tm) ##################################### ##### 1. DATA IMPORT & CLEANING ##### ##################################### ##### 1.1 GOVERNMENT DATA ##### ## Data: "Statistics on revenue, expenditure, debt, and assets (cash and security holdings) for governments. There are statistics for the 50 state areas and the District of Columbia, as well as a national summary." government <- read_fwf(     file = "Fin_GID_2014.txt",     skip = 4,     fwf_widths(c(14, 64, 35, 5, 5, 9, 2, 7, 2, 2, 2, 4, 2))) colnames(government) = c("ID_Code", "ID_Name", "County_Name", "FIPS", "FIPS_Place_Code", "Population", "Population_Year", "Enrollment", "Enrollment_Year", "Function_Code_for_Special_Districts", "School_Level_Code", "Fiscal_Year_Ending", "Survey_Year") raw_data_government <- government ##### 1.1.1 Decompose ID ##### # digit 1-2: state code government["State_Code"] <- substr(government$ID_Code, 1, 2) # digit 3: type of government  government["Type_of_Government"] <- substr(government$ID_Code, 3, 3) # 0 = state, 1 = county, 2 = city, 3 = township, 4 = special district, 5 = independent school district # digit 4-6: county or county-type area government["County_Code"] <- substr(government$ID_Code, 4, 6) # digit 7-9: unit identifier government["Unit_Identifier"] <- substr(government$ID_Code, 7, 9) # digit 10-14: should be 00000 to indicate that the unit is not part of another government government["Check_Var_Multiple_Governments"] <- substr(government$ID_Code, 10, 14) ##### 1.1.2 Remove entries and columns ##### # remove all individual units = 3,4 or 5 since we're only interested in states, counties and cities government <- government[!government$Type_of_Government %in% c(3, 4, 5),] # since only school districts have enrollment and school information, we can drop the columns "Enrollment", "Enrollment_Year" and "School_Level_Code" # "Function_Code_for_Special_Districts" is only for special districts, can be dropped government <- government[, !(names(government) %in% c("Enrollment", "Enrollment_Year", "Function_Code_for_Special_Districts", "School_Level_Code"))] # All remaining items are not part of another government (=00000). Column can be removed table(government$Check_Var_Multiple_Governments) government <- government[, !(names(government) %in% "Check_Var_Multiple_Governments")] ##### 1.1.3 Clean FIPS codes ##### # some FIPS codes are obviously wrong; replace by correct values government$FIPS <- as.numeric(government$FIPS) government$ID_Code <- as.numeric(government$ID_Code) # FIPS code is 2 (state code of Alaska); correct one is 02275 government[which(government$ID_Code == 2203600100000), "FIPS"] <- 02275 ##### 1.1.4 Reformat data ##### # reformatting variables as appropriate government$FIPS_County_Code <- as.numeric(government$FIPS_County_Code) government$FIPS_Place_Code <- as.numeric(government$FIPS_Place_Code) government$FIPS_State_Code <- as.numeric(government$FIPS_State_Code) government$Population_Year <- as.numeric(government$Population_Year) government$Fiscal_Year_Ending <- as.factor(government$Fiscal_Year_Ending) # fiscal year ending is a date, formatted as MDD --> factor variable government$ID_Code <- as.numeric(government$ID_Code) government$Type_of_Government <- as.factor(government$Type_of_Government) ##### 1.1.5 Subsetting government into state, county and city dataframes government_state <- government[government$Type_of_Government == 0,] government_county <- government[government$Type_of_Government == 1,] government_city <- government[government$Type_of_Government == 2,] ##### 1.2 MAPPING DATA ##### ##### 1.2.1 FIPS to District table ##### mapping_fips_to_districts <- read.csv(file = "MAPPING_FIPS_to_District.csv", header = T, sep = ";", encoding = "UTF-8") colnames(mapping_fips_to_districts) <- c("State", "County", "State_Code", "County_Code", "FIPS", "District", "Numfips") # load mapping list # mapping_states_to_districts <- read.csv(file = "MAPPING_States_DistrictCourts_StateCodes.csv", header = T, sep = ";", encoding = "UTF-8") # colnames(mapping_states_to_districts) = c("District_Courts", "State_Code", "State_Name", "Abbrevation") ##### 1.2.1.1 Cleaning ##### str(mapping_fips_to_districts) mapping_fips_to_districts$County <- as.character(mapping_fips_to_districts$County) mapping_fips_to_districts$County_Code <- as.numeric(mapping_fips_to_districts$County_Code) # Shannon County, SD changed its name to Oglala Lakota County, SD in 2015. My mapping table was apparently outdated. Due to this name change, the FIPS changed from 46113 to 46102 mapping_fips_to_districts$FIPS[mapping_fips_to_districts$FIPS == 46113] <- 46102 mapping_fips_to_districts$Numfips[mapping_fips_to_districts$FIPS == 46102] <- 46102 mapping_fips_to_districts$County[mapping_fips_to_districts$FIPS == 46102] <- "Oglala Lakota" # Wade Hampton Census Area, A changed its name to Kusilvak Census Area, A in 2015. FIPS changed from 02270 to 02158 mapping_fips_to_districts$FIPS[mapping_fips_to_districts$FIPS == 02270] <- 02158 mapping_fips_to_districts$Numfips[mapping_fips_to_districts$FIPS == 02158] <- 2158 mapping_fips_to_districts$County[mapping_fips_to_districts$FIPS == 02158] <- "Kusilvak" # My mapping table has mapped 1 FIPS code twice. Remove it: mapping_fips_to_districts <- mapping_fips_to_districts[!mapping_fips_to_districts$County == "Skagway-Yakutat",] ##### 1.3 MERGING ##### # merging of states to judicial districts not possible, since first government_state <- merge(government_state, mapping_fips_to_districts, by.x = "FIPS", by.y = "State_Code") # HAVE A LOOK ON THIS ONE! government_county <- merge(government_county, mapping_fips_to_districts, by = "FIPS") government_city <- merge(government_city, mapping_fips_to_districts, by = "FIPS") ##### 1.4 CORRUPTION DATA ##### # Describing the activities of the Public Integrity Section from 1998 to 2015.  # Also provides statistics on the nationwide federal effort against public corruption over the previous decade corruption <- read.csv(file = "Public_Corruption_Data.csv", header = T, sep = ";", encoding = "UTF-8") colnames(corruption) <- c("District_Code", "District", "1998","1999","2000","2001","2002","2003","2004","2005","2006", "2007", "2008","2009","2010","2011","2012","2013", "2014","2015") # add total count total <- NULL for (row in 1:nrow(corruption)) {     total <- c(total, sum(corruption[row, 3:20], na.rm = T)) } corruption$Total <- as.numeric(total) # checksum = sum, all good
bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8", stringsAsFactors = F) # 1048575 elements
bond_issuers <- bond_issuers[!grepl("school", bond_issuers$iq_issuer),] # remove; now 186628 elements
bond_issuers <- bond_issuers[!grepl("township", bond_issuers$iq_issuer),] # 181618 elements
bond_issuers <- bond_issuers[!grepl("special district", bond_issuers$iq_issuer),] # 181607
bond_issuers <- bond_issuers[!grepl("educational", bond_issuers$iq_issuer),] # 174853
bond_issuers <- bond_issuers[!grepl("hospital", bond_issuers$iq_issuer),] # 173075
str(bond_issuers)
bond_issuer_unique <- unique(bond_issuers$iq_issuer)
bond_issuers <- bond_issuers[!grepl("school", bond_issuers$iq_issuer),] # remove; now 186628 elements
bond_issuers$iq_issuer <- tolower(bond_issuers$iq_issuer)
bond_issuers <- bond_issuers[!grepl("school", bond_issuers$iq_issuer),] # remove; now 186628 elements
bond_issuers <- bond_issuers[!grepl("township", bond_issuers$iq_issuer),] # 181618 elements
bond_issuers <- bond_issuers[!grepl("special district", bond_issuers$iq_issuer),] # 181607
bond_issuers <- bond_issuers[!grepl("educational", bond_issuers$iq_issuer),] # 174853
bond_issuers <- bond_issuers[!grepl("hospital", bond_issuers$iq_issuer),] # 173075
bond_issuer_unique <- unique(bond_issuers$iq_issuer)
bond_issuer_unique <- c(unique(bond_issuers$iq_issuer), bond_issuers$cusip6)
bond_issuer_unique <- unique(bond_issuers$iq_issuer)
bond_issuers_unique <- NULL
bond_issuer_unique <- NULL
rm(bond_issuers_unique, envir = as.environment(".GlobalEnv"))
bond_issuer_unique$iq_issuer <- unique(bond_issuers$iq_issuer)
bond_issuers_unique <- merge(bond_issuers, bond_issuers_unique)
bond_issuers_unique <- NULL
bond_issuers_unique$iq_issuer <- unique(bond_issuers$iq_issuer)
bond_issuers_unique <- merge(bond_issuers, bond_issuers_unique)
bond_issuers_unique <- NULL
bond_issuers_unique$iq_issuer <- unique(bond_issuers$iq_issuer)
bond_issuers_unique <- bond_issuers[!duplicated(bond_issuers[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("water", bond_issuers$iq_issuer),]
source("Custom_Functions.R")
generateWordCloud(bond_issuers_unique, 50)
generateWordCloud(bond_issuers_unique$iq_issuer, 50)
table(bond_issuers_unique$iq_issuer)
test <- bond_issuers[grepl("facilities", bond_issuers$iq_issuer),]
test <- unique(bond_issuers[grepl("facilities", bond_issuers$iq_issuer),])
test <- test[!duplicated(test[, c("iq_issuer")]),]
generateWordCloud(bond_issuers_unique$iq_issuer, 50)
test <- bond_issuers[grepl("utility", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("utility", bond_issuers$iq_issuer),] #
generateWordCloud(bond_issuers_unique$iq_issuer, 50)
test <- bond_issuers[grepl("building", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("building", bond_issuers$iq_issuer),] # 165130
bond_issuers_unique <- bond_issuers[!duplicated(bond_issuers[, c("iq_issuer")]),]
generateWordCloud(bond_issuers_unique$iq_issuer, 50)
source("Custom_Functions.R")
generateWordCloud(bond_issuers_unique$iq_issuer, 50)
test <- bond_issuers[grepl("special", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("special", bond_issuers$iq_issuer),] # 162556
bond_issuers_unique <- bond_issuers[!duplicated(bond_issuers[, c("iq_issuer")]),]
generateWordCloud(bond_issuers_unique$iq_issuer, 50)
test <- bond_issuers[grepl("fire", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("fire", bond_issuers$iq_issuer),] # 161597
test <- bond_issuers[grepl("tax", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("tax", bond_issuers$iq_issuer),] # 160804
test <- bond_issuers[grepl("corp", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("corp", bond_issuers$iq_issuer),] # 160374
bond_issuers_unique <- bond_issuers[!duplicated(bond_issuers[, c("iq_issuer")]),]
generateWordCloud(bond_issuers_unique$iq_issuer, 50)
test <- bond_issuers[grepl("housing", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("housing", bond_issuers$iq_issuer),] # 160374
bond_issuers_unique <- bond_issuers[!duplicated(bond_issuers[, c("iq_issuer")]),]
test <- bond_issuers[grepl("college", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("college", bond_issuers$iq_issuer),] # 148130
test <- bond_issuers[grepl("health", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("health", bond_issuers$iq_issuer),] # 148130
bond_issuers_unique <- bond_issuers[!duplicated(bond_issuers[, c("iq_issuer")]),]
test <- bond_issuers[grepl("redevelopment", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
bond_issuers <- bond_issuers[!grepl("redevelopment", bond_issuers$iq_issuer),] # 160374
bond_issuers_unique <- bond_issuers[!duplicated(bond_issuers[, c("iq_issuer")]),]
generateWordCloud(bond_issuers_unique$iq_issuer, 50)
test <- bond_issuers[grepl("library", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
getwd() setwd("C:/Users/graeb/OneDrive/Uni/_Masterarbeit/Data/R Projekt") # install.packages("readr") # install.packages("plyr") # install.packages("ggplot2") # install.packages("psych") # install.packages("dplyr") # install.packages("car") # install.packages("tm") library(plyr) library(dplyr) library(readr) library(ggplot2) library(psych) library(car) library(tm) ##################################### ##### 1. DATA IMPORT & CLEANING ##### ##################################### ##### 1.1 GOVERNMENT DATA ##### ## Data: "Statistics on revenue, expenditure, debt, and assets (cash and security holdings) for governments. There are statistics for the 50 state areas and the District of Columbia, as well as a national summary." government <- read_fwf(     file = "Fin_GID_2014.txt",     skip = 4,     fwf_widths(c(14, 64, 35, 5, 5, 9, 2, 7, 2, 2, 2, 4, 2))) colnames(government) = c("ID_Code", "ID_Name", "County_Name", "FIPS", "FIPS_Place_Code", "Population", "Population_Year", "Enrollment", "Enrollment_Year", "Function_Code_for_Special_Districts", "School_Level_Code", "Fiscal_Year_Ending", "Survey_Year") raw_data_government <- government ##### 1.1.1 Decompose ID ##### # digit 1-2: state code government["State_Code"] <- substr(government$ID_Code, 1, 2) # digit 3: type of government  government["Type_of_Government"] <- substr(government$ID_Code, 3, 3) # 0 = state, 1 = county, 2 = city, 3 = township, 4 = special district, 5 = independent school district # digit 4-6: county or county-type area government["County_Code"] <- substr(government$ID_Code, 4, 6) # digit 7-9: unit identifier government["Unit_Identifier"] <- substr(government$ID_Code, 7, 9) # digit 10-14: should be 00000 to indicate that the unit is not part of another government government["Check_Var_Multiple_Governments"] <- substr(government$ID_Code, 10, 14) ##### 1.1.2 Remove entries and columns ##### # remove all individual units = 3,4 or 5 since we're only interested in states, counties and cities government <- government[!government$Type_of_Government %in% c(3, 4, 5),] # since only school districts have enrollment and school information, we can drop the columns "Enrollment", "Enrollment_Year" and "School_Level_Code" # "Function_Code_for_Special_Districts" is only for special districts, can be dropped government <- government[, !(names(government) %in% c("Enrollment", "Enrollment_Year", "Function_Code_for_Special_Districts", "School_Level_Code"))] # All remaining items are not part of another government (=00000). Column can be removed table(government$Check_Var_Multiple_Governments) government <- government[, !(names(government) %in% "Check_Var_Multiple_Governments")] ##### 1.1.3 Clean FIPS codes ##### # some FIPS codes are obviously wrong; replace by correct values government$FIPS <- as.numeric(government$FIPS) government$ID_Code <- as.numeric(government$ID_Code) # FIPS code is 2 (state code of Alaska); correct one is 02275 government[which(government$ID_Code == 2203600100000), "FIPS"] <- 02275 ##### 1.1.4 Reformat data ##### # reformatting variables as appropriate government$FIPS_County_Code <- as.numeric(government$FIPS_County_Code) government$FIPS_Place_Code <- as.numeric(government$FIPS_Place_Code) government$FIPS_State_Code <- as.numeric(government$FIPS_State_Code) government$Population_Year <- as.numeric(government$Population_Year) government$Fiscal_Year_Ending <- as.factor(government$Fiscal_Year_Ending) # fiscal year ending is a date, formatted as MDD --> factor variable government$ID_Code <- as.numeric(government$ID_Code) government$Type_of_Government <- as.factor(government$Type_of_Government) ##### 1.1.5 Subsetting government into state, county and city dataframes government_state <- government[government$Type_of_Government == 0,] government_county <- government[government$Type_of_Government == 1,] government_city <- government[government$Type_of_Government == 2,] ##### 1.2 MAPPING DATA ##### ##### 1.2.1 FIPS to District table ##### mapping_fips_to_districts <- read.csv(file = "MAPPING_FIPS_to_District.csv", header = T, sep = ";", encoding = "UTF-8") colnames(mapping_fips_to_districts) <- c("State", "County", "State_Code", "County_Code", "FIPS", "District", "Numfips") # load mapping list # mapping_states_to_districts <- read.csv(file = "MAPPING_States_DistrictCourts_StateCodes.csv", header = T, sep = ";", encoding = "UTF-8") # colnames(mapping_states_to_districts) = c("District_Courts", "State_Code", "State_Name", "Abbrevation") ##### 1.2.1.1 Cleaning ##### str(mapping_fips_to_districts) mapping_fips_to_districts$County <- as.character(mapping_fips_to_districts$County) mapping_fips_to_districts$County_Code <- as.numeric(mapping_fips_to_districts$County_Code) # Shannon County, SD changed its name to Oglala Lakota County, SD in 2015. My mapping table was apparently outdated. Due to this name change, the FIPS changed from 46113 to 46102 mapping_fips_to_districts$FIPS[mapping_fips_to_districts$FIPS == 46113] <- 46102 mapping_fips_to_districts$Numfips[mapping_fips_to_districts$FIPS == 46102] <- 46102 mapping_fips_to_districts$County[mapping_fips_to_districts$FIPS == 46102] <- "Oglala Lakota" # Wade Hampton Census Area, A changed its name to Kusilvak Census Area, A in 2015. FIPS changed from 02270 to 02158 mapping_fips_to_districts$FIPS[mapping_fips_to_districts$FIPS == 02270] <- 02158 mapping_fips_to_districts$Numfips[mapping_fips_to_districts$FIPS == 02158] <- 2158 mapping_fips_to_districts$County[mapping_fips_to_districts$FIPS == 02158] <- "Kusilvak" # My mapping table has mapped 1 FIPS code twice. Remove it: mapping_fips_to_districts <- mapping_fips_to_districts[!mapping_fips_to_districts$County == "Skagway-Yakutat",] ##### 1.3 MERGING ##### # merging of states to judicial districts not possible, since first government_state <- merge(government_state, mapping_fips_to_districts, by.x = "FIPS", by.y = "State_Code") # HAVE A LOOK ON THIS ONE! government_county <- merge(government_county, mapping_fips_to_districts, by = "FIPS") government_city <- merge(government_city, mapping_fips_to_districts, by = "FIPS") ##### 1.4 CORRUPTION DATA ##### # Describing the activities of the Public Integrity Section from 1998 to 2015.  # Also provides statistics on the nationwide federal effort against public corruption over the previous decade corruption <- read.csv(file = "Public_Corruption_Data.csv", header = T, sep = ";", encoding = "UTF-8") colnames(corruption) <- c("District_Code", "District", "1998","1999","2000","2001","2002","2003","2004","2005","2006", "2007", "2008","2009","2010","2011","2012","2013", "2014","2015") # add total count total <- NULL for (row in 1:nrow(corruption)) {     total <- c(total, sum(corruption[row, 3:20], na.rm = T)) } corruption$Total <- as.numeric(total) # checksum = sum, all good ##### 1.5 BOND ISSUER FILE ##### # The bond issuer file is a list of all bond issuers. We need to clean from it every issuer who isn't a state, county or city. bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8", stringsAsFactors = F) # 1048575 elements str(bond_issuers) bond_issuers$iq_issuer <- tolower(bond_issuers$iq_issuer) ##### 1.5.1 Remove irrelevant issuers ##### bond_issuers <- bond_issuers[!grepl("school", bond_issuers$iq_issuer),] # remove; now 186628 elements  bond_issuers <- bond_issuers[!grepl("township", bond_issuers$iq_issuer),] # 181618 elements bond_issuers <- bond_issuers[!grepl("special district", bond_issuers$iq_issuer),] # 181607 bond_issuers <- bond_issuers[!grepl("educational", bond_issuers$iq_issuer),] # 174853 bond_issuers <- bond_issuers[!grepl("hospital", bond_issuers$iq_issuer),] # 173075 bond_issuers <- bond_issuers[!grepl("water", bond_issuers$iq_issuer),] # 167026 bond_issuers <- bond_issuers[!grepl("utility", bond_issuers$iq_issuer),] # 165130 bond_issuers <- bond_issuers[!grepl("building", bond_issuers$iq_issuer),] # 162556 bond_issuers <- bond_issuers[!grepl("special", bond_issuers$iq_issuer),] # 161597 bond_issuers <- bond_issuers[!grepl("fire", bond_issuers$iq_issuer),] # 160804 bond_issuers <- bond_issuers[!grepl("tax", bond_issuers$iq_issuer),] # 160374 bond_issuers <- bond_issuers[!grepl("corp", bond_issuers$iq_issuer),] # 156911 bond_issuers <- bond_issuers[!grepl("housing", bond_issuers$iq_issuer),] # 148130 bond_issuers <- bond_issuers[!grepl("college", bond_issuers$iq_issuer),] # 143927 bond_issuers <- bond_issuers[!grepl("health", bond_issuers$iq_issuer),] # 143140 # ??? redevelopment agencies are somewhat related to cities (improving infrastructure & co.) how to handle?  bond_issuers <- bond_issuers[!grepl("redevelopment", bond_issuers$iq_issuer),] # 140946
bond_issuers_unique <- bond_issuers[!duplicated(bond_issuers[, c("iq_issuer")]),]
bond_issuers_2 <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8", stringsAsFactors = F) # 1048575 elements
bond_issuers_unique_2 <- bond_issuers_2[!duplicated(bond_issuers_2[, c("iq_issuer")]),]
bond_issuers <- read.csv(file = "./Transaction_Data/MSRB_cusip9_issuer_newfields.csv", header = T, sep = ";", encoding = "UTF-8", stringsAsFactors = F) # 1048575 elements
test <- bond_issuers[grepl("corp", bond_issuers$iq_issuer),]
test <- test[!duplicated(test[, c("iq_issuer")]),]
test <- bond_issuers[grepl("corp", bond_issuers$iq_issuer),]
